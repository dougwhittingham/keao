# -*- coding: utf-8 -*-
"""magnetorquers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N38k9i0z2pSoK6dW5vTi_TXkY5VobADl
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

"""##User inputs"""

V_s   = 3.3                       # supply voltage
p     = 1.68E-08                  # resistivity of copper
A_s   = 5.80E-03                  # average surface area
A_cw  = 5.40E-09                  # cross sectional area of wire
B     = 2.50E-05                  # Earth's Mag-field
N     = 50                        # turns
L_w   = 11.5                      # wire length
n     = 4                         # number of layers
R     = p*L_w/A_cw                # resistance of wire

# Value checker
print(R)
print(L_w)

"""##Magnetorquer model"""

def series(N, R, V_s, A_s, B, n): 
  R_tot = R*n
  I = V_s/R_tot
  T = N*I*A_s*B
  return T

def parallel(N, R, V_s, A_s, B, n):
  R_tot = 1/((1/R)*n)
  I = V_s/R_tot
  T = N*I*A_s*B
  return T

torque1 = series(N, R, V_s, A_s, B, n);
torque2 = parallel(N, R, V_s, A_s, B, n);

print(torque1)
print(torque2)

def torque_rod_model(tx,ty,tz):
  if tx > 0:
    if tx > series(N, R, V_s, A_s, B, n): 
        tx = parallel(N, R, V_s, A_s, B, n)
    else:
        tx = series(N, R, V_s, A_s, B, n)
  elif tx == 0:
    tx = 0
  else:
    if tx < -series(N, R, V_s, A_s, B, n): 
      tx = -parallel(N, R, V_s, A_s, B, n)
    else:
      tx = -series(N, R, V_s, A_s, B, n)
    
  if ty > 0:
    if ty > series(N, R, V_s, A_s, B, n): 
      ty = parallel(N, R, V_s, A_s, B, n)
    else:
      ty = series(N, R, V_s, A_s, B, n)
  elif ty == 0:
    ty = 0
  else:
    if ty < -series(N, R, V_s, A_s, B, n): 
      ty = -parallel(N, R, V_s, A_s, B, n)
    else:
      ty = -series(N, R, V_s, A_s, B, n)
    
  if tz > 0:
    if tz > series(N, R, V_s, A_s, B, n): 
      tz = parallel(N, R, V_s, A_s, B, n)
    else:
      tz = series(N, R, V_s, A_s, B, n)
  elif tz == 0:
    tz = 0
  else:
    if tz < -series(N, R, V_s, A_s, B, n): 
      tz = -parallel(N, R, V_s, A_s, B, n)
    else:
      tz = -series(N, R, V_s, A_s, B, n)

  return np.array([tx, ty, tz])

"""##Model

Goal: create some logic that switches the torque coil to parallel or series based on the calculated torque from the detumble/controller model
"""

tx = 3e6
ty = -3e6
tz = 1.68E-07
Torque = torque_rod_model(tx,ty,tz)
print(Torque)